import asyncio
from config import Config
import logging
from datetime import timedelta
from aiogram import Dispatcher, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.enums import ParseMode
import tabulate
from filters import AskStats, AddNewVolume, DelVolume, NextPageVolumes
from filters import PrevPageVolumes, CancelPageVolumes
from filters import AddNotificationVolume, CancelNotificationVolumes
from filters import AddStartTimeNotification, AddEndTimeNotification
from filters import AddTzNotification, AddThresholdNotification
from filters import DelNotification, SetUserTz
from kb import gen_kb_show_volume, gen_kb_add_volume, gen_kb_del_volume
from kb import gen_kb_notifi_volume, gen_kb_notifi_time, gen_kb_notifi_tz
from kb import gen_kb_notifi_threshold, gen_kb_del_notifi, gen_kb_user_tz
from db import get_active_volumes, check_user, create_user, get_data_in_delta
from db import get_user_role, add_new_volume_db, del_volume_db, check_database
from db import create_admin, get_users, add_new_notification, add_notifier_tz
from db import check_vol_notifier, add_notifier_starttime, add_notifier_endtime
from db import add_notifier_threshold, get_notifier_lots, del_notifier_lots
from db import update_user_tz, get_user_tz
from functions import calculate_coefficient


CFG = Config()
DSN = CFG.get_dsn()
MAX_VOLUMES = 3


logging.basicConfig(level=logging.INFO)
bot = Bot(token=CFG.token)
dp = Dispatcher()

########################### Commands ###########################

@dp.message(Command(commands=['start']))
async def welcome(message: Message):
    if await check_user(DSN, message):
        await message.answer('–ù—É –Ω—É, —Ö–∞—Ä—ç —Å—Ç–∞—Ä—Ç—É–ª–∏ –∂–∞—Ç—å...')
    elif len(await get_users(DSN, message)) == 0:
        await create_admin(DSN, message)
        await message.answer(text='–¢—ã –ø–µ—Ä–≤—ã–π –æ–¥–µ–ª —Ç–∞–ø–æ—á–∫–∏, —Ç–µ–ø–µ—Ä—å —Ç—ã –∞–¥–º–∏–Ω –±–æ—Ç–∞')
    else:
        await create_user(DSN, message)
        await message.answer(text='–ó–∞—Ä–µ–≥–∞–ª —Ç–µ–±—è, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –≤—Ä–µ–º–µ–Ω–Ω—É—é '
                                  '–∑–æ–Ω—É –∏ –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ä–∞–±–æ—Ç–µ\.'
                                  ' –¢–≤–æ—è —Ç–µ–∫—É—â–∞—è —Ä–æ–ª—å **–º–∞–ª–µ—Ü** üë∂',
                             reply_markup=gen_kb_user_tz(),
                             parse_mode=ParseMode.MARKDOWN_V2)


@dp.message(Command(commands=['show']))
async def show_volume_user(message: Message):
    if await check_user(DSN, message):
        volumes = await get_active_volumes(CFG.get_dsn())
        await message.answer(text='–í—ã–±–∏—Ä–∞–π –±—Ä–æ–¥—è–≥–∞',
                         reply_markup=gen_kb_show_volume(volumes)
                         )
    else:
        await message.answer(text='–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')


@dp.message(Command(commands=['add']))
async def add_volume_user(message: Message):
    if await check_user(DSN, message):
        role = await get_user_role(DSN, message)
        if role == 'junior':
            await message.answer(text='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤, –≤–∞—à–∞ —Ä–æ–ª—å –º–∞–ª–µ—Ü')
        elif len(await get_active_volumes(DSN)) >= MAX_VOLUMES:
            await message.answer(text='–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '
                                    '–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—ä–µ–º–æ–≤: '
                                    f'{MAX_VOLUMES}')
        else:
            volumes = await get_active_volumes(CFG.get_dsn())
            await message.answer(
                text=f'–£–∂–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–º {", ".join(map(str, volumes))}\n'
                    f'–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ {MAX_VOLUMES - len(volumes)}, –≤—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ {MAX_VOLUMES}\n\n'
                    '–∑–≤–µ–∑–¥–æ—á–∫–æ–π (*) –ø–æ–º–µ—á–µ–Ω—ã —Ç–µ, —á—Ç–æ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ, '
                    '–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ –∑–≤–µ–∑–¥–æ—á–∫–æ–π (*) –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —É–¥–∞–ª–µ–Ω–∏—é –æ–±—ä–µ–º–∞',
                reply_markup=gen_kb_add_volume(volumes, 0)
                                )
    else:
        await message.answer(text='–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')


@dp.message(Command(commands=['del', 'remove']))
async def del_volume_user(message: Message):
    if await check_user(DSN, message):
        role = await get_user_role(DSN, message)
        if role == 'junior':
            await message.answer(text='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤, –≤–∞—à–∞ —Ä–æ–ª—å –º–∞–ª–µ—Ü')
        elif len(await get_active_volumes(DSN)) == 0:
            await message.answer(text='–ê –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å, –≤–æ—Ç —Ç–∞–∫...')
        else:
            volumes = await get_active_volumes(CFG.get_dsn())
            await message.answer(
                text=f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–º—ã {", ".join(map(str, volumes))}\n'
                    '–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–∏—Ç –æ–±—ä–µ–º –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
                reply_markup=gen_kb_del_volume(volumes)
                                )
    else:
        await message.answer(text='–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')


@dp.message(Command(commands=['setnotification']))
async def set_notification_user(message: Message):
    if await check_user(DSN, message):
        role = await get_user_role(DSN, message)
        if role == 'junior':
            await message.answer(text='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤, –≤–∞—à–∞ —Ä–æ–ª—å –º–∞–ª–µ—Ü')
        elif len(await get_active_volumes(DSN)) == 0:
            await message.answer(
                text='–ê –Ω–µ—á–µ–≥–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –≤–æ—Ç—å')
        else:
            volumes = await get_active_volumes(CFG.get_dsn())
            await message.answer(
                text=f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±—ä–µ–º—ã {", ".join(map(str, volumes))}\n'
                      '–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç –º–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –æ–±—ä–µ–º—É',
                reply_markup=gen_kb_notifi_volume(volumes)
                                )
    else:
        await message.answer(
            text='–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\n'
                 '—Ö–æ—Ç—è —É –º–µ–Ω—è –µ—Å—Ç—å —Å—Ç–æ–π–∫–æ–µ –æ—â—É—â–µ–Ω–∏–µ, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç'
            )


@dp.message(Command(commands=['delnotification']))
async def set_notification_user(message: Message):
    if await check_user(DSN, message):
        role = await get_user_role(DSN, message)
        if role == 'junior':
            await message.answer(text='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤, –≤–∞—à–∞ —Ä–æ–ª—å –º–∞–ª–µ—Ü')
        else:
            volumes = await get_notifier_lots(CFG.get_dsn(), message)
            await message.answer(
                text=f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–º—ã {", ".join(map(lambda x: str(x[0]), volumes))}\n'
                      '–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏  —É–¥–∞–ª–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –æ–±—ä–µ–º—É',
                reply_markup=gen_kb_del_notifi(volumes)
                                 )
    else:
        await message.answer(
            text='–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\n'
                 '—Ö–æ—Ç—è —É –º–µ–Ω—è –µ—Å—Ç—å —Å—Ç–æ–π–∫–æ–µ –æ—â—É—â–µ–Ω–∏–µ, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç'
            )


########################### CallBacks ###########################

@dp.callback_query(SetUserTz())
async def set_user_tz(callback: CallbackQuery, usertz: int):
    await update_user_tz(DSN, callback, usertz)
    await callback.message.edit_text(text=f'–¢–≤–æ—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ +{usertz}')


@dp.callback_query(AskStats())
async def show_volume_stats(callback: CallbackQuery, volume: int):
    tz = timedelta(minutes=300)
    periods = (10, 60)
    head = [f'{i} –º–∏–Ω—É—Ç' for i in periods]
    res = []
    res.append(['–õ–æ—Ç—ã'] + [await get_data_in_delta(DSN, 'lots', timedelta(minutes=i), tz, volume) for i in periods])
    res.append(['–†–∞–∫–µ—Ç—ã'] + [await get_data_in_delta(DSN, 'rockets', timedelta(minutes=i), tz, volume) for i in periods])
    res.append(['–ê–Ω–æ–º–∞–ª–∏–∏'] + [await get_data_in_delta(DSN, 'anomaly', timedelta(minutes=i), tz, volume) for i in periods])
    res.append(['–ü—Ä–æ–¥–∞–Ω–æ'] + [await get_data_in_delta(DSN, 'sold', timedelta(minutes=i), tz, volume) for i in periods])
    last_row = ['–ü—Ä–æ–¥–∞–Ω–æ (%)']
    for i in range(1, len(periods) + 1):
        last_row.append(round(calculate_coefficient(res[0][i],
                                              res[1][i],
                                              res[2][i],
                                              res[3][i]) * 100, 2))
    res.append(last_row)
    text_msg = tabulate.tabulate(res, headers=head, )
    await callback.message.edit_text(text=f'–û–±—ä–µ–º: {volume}\n```\n{text_msg}\n```', parse_mode=ParseMode.MARKDOWN_V2)


@dp.callback_query(AddNewVolume())
async def add_volume(callback: CallbackQuery, addvol: int):
    volumes = await get_active_volumes(DSN)
    if addvol in volumes:
        await callback.message.edit_text(
            text='–ö—Ç–æ—Ç–æ –æ–ø–µ—Ä–µ–¥–∏–ª —Ç–µ–±—è –±—Ä–æ–¥—è–≥–∞!')
    elif len(volumes) == MAX_VOLUMES:
        await callback.message.edit_text(
            text='–£–ø–µ—Ä–ª–∏—Å—å –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—ä–µ–º–æ–≤')
    else:
        await add_new_volume_db(DSN, addvol)
        await callback.message.edit_text(
            text=f'–í –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ–±–∞–≤–ª–µ–Ω –æ–±—ä–µ–º {addvol}')


@dp.callback_query(DelVolume())
async def del_volume(callback: CallbackQuery, delvol: int):
    await del_volume_db(DSN, delvol)
    await callback.message.edit_text(
        text=f'–ò–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–¥–∞–ª–µ–Ω –æ–±—ä–µ–º {delvol}')


@dp.callback_query(NextPageVolumes())
async def change_to_next_page(callback: CallbackQuery, nextpagevol: int):
    volumes = await get_active_volumes(CFG.get_dsn())
    await callback.message.edit_text(
        text=f'–£–∂–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–º {", ".join(map(str, volumes))}\n'
                f'–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ {MAX_VOLUMES - len(volumes)}, –≤—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ {MAX_VOLUMES}\n\n'
                '–∑–≤–µ–∑–¥–æ—á–∫–æ–π (*) –ø–æ–º–µ—á–µ–Ω—ã —Ç–µ, —á—Ç–æ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ, '
                '–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ –∑–≤–µ–∑–¥–æ—á–∫–æ–π (*) –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —É–¥–∞–ª–µ–Ω–∏—é –æ–±—ä–µ–º–∞',
        reply_markup=gen_kb_add_volume(volumes, nextpagevol)
                        )


@dp.callback_query(PrevPageVolumes())
async def change_to_prev_page(callback: CallbackQuery, prevpagevol: int):
    volumes = await get_active_volumes(CFG.get_dsn())
    await callback.message.edit_text(
        text=f'–£–∂–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–º {", ".join(map(str, volumes))}\n'
                f'–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ {MAX_VOLUMES - len(volumes)}, –≤—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ {MAX_VOLUMES}\n\n'
                '–∑–≤–µ–∑–¥–æ—á–∫–æ–π (*) –ø–æ–º–µ—á–µ–Ω—ã —Ç–µ, —á—Ç–æ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ, '
                '–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ –∑–≤–µ–∑–¥–æ—á–∫–æ–π (*) –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —É–¥–∞–ª–µ–Ω–∏—é –æ–±—ä–µ–º–∞',
        reply_markup=gen_kb_add_volume(volumes, prevpagevol)
                        )


@dp.callback_query(CancelPageVolumes())
async def cancel_volume_pages(callback: CallbackQuery):
    await callback.message.delete()


@dp.callback_query(AddNotificationVolume())
async def add_notification_volume(callback: CallbackQuery, setvol: int):
    if await check_vol_notifier(DSN, callback, setvol):
        await callback.message.edit_text(
            text=f'–û–±—ä–µ–º {setvol} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω')
    else:
        await add_new_notification(DSN, callback, setvol)
        await callback.message.edit_text(
            text=f'‚¨áÔ∏è –í –∫–∞–∫–æ–π —á–∞—Å –Ω–∞—á–∏–Ω–∞—Ç—å —É–≤–µ–¥–æ–º–ª—è—Ç—å –ø–æ –æ–±—ä–µ–º—É {setvol} üïê\n',
            reply_markup=gen_kb_notifi_time('starttime', setvol)
        )


@dp.callback_query(AddStartTimeNotification())
async def add_notification_starttime(callback: CallbackQuery, vol: int, start_time: str):
    await add_notifier_starttime(DSN, callback, vol, start_time)
    await callback.message.edit_text(
        text=f'‚¨ÜÔ∏è –í –∫–∞–∫–æ–π —á–∞—Å –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª—è—Ç—å –ø–æ –æ–±—ä–µ–º—É {vol} üï•\n',
        reply_markup=gen_kb_notifi_time('endtime', vol)
    )


# @dp.callback_query(AddEndTimeNotification())
# async def add_notification_endtime(callback: CallbackQuery, vol: int, end_time: str):
#     await add_notifier_endtime(DSN, callback, vol, end_time)
#     await callback.message.edit_text(
#         text=f'üá∑üá∫ –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ç–∞–π–º–∑–æ–Ω—É\n',
#         reply_markup=gen_kb_notifi_tz(vol)
#     )


@dp.callback_query(AddEndTimeNotification())
async def add_notification_tz(callback: CallbackQuery, vol: int, end_time: str):
    tz = await get_user_tz(DSN, callback)
    await add_notifier_endtime(DSN, callback, vol, end_time)
    await add_notifier_tz(DSN, callback, vol, tz)
    await callback.message.edit_text(
        text=f'–ù–∞ –∫–∞–∫–æ–º —É—Ä–æ–≤–Ω–µ —Ç—Ä–∏–≥–µ—Ä–∏–º –¥–ª—è –æ–±—ä–µ–º–∞ {vol}\n',
        reply_markup=gen_kb_notifi_threshold(vol)
    )


@dp.callback_query(AddThresholdNotification())
async def add_notification_threshold(callback: CallbackQuery, vol: int, threshold: str):
    await add_notifier_threshold(DSN, callback, vol, threshold)
    await callback.message.edit_text(
        text=f'–î–æ–±–∞–≤–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—ä–µ–º–∞ {vol}\n'
    )


@dp.callback_query(DelNotification())
async def del_notification(callback: CallbackQuery, vol: int):
    await del_notifier_lots(DSN, callback, vol)
    await callback.message.edit_text(
        text=f'–£–¥–∞–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—ä–µ–º–∞ {vol}\n'
    )


@dp.callback_query(CancelNotificationVolumes())
async def cancel_notification_volume(callback: CallbackQuery):
    await callback.message.delete()


@dp.callback_query()
async def test(callback: CallbackQuery):
    print(callback.data)


if __name__ == '__main__':
    asyncio.run(check_database(DSN))
    dp.run_polling(bot)
